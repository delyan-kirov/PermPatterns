language ESSENCE 2.4.0

given length : int
# For a mesh (permutation, Mesh) we have a decomposition Mesh = Bivincular + Consecutive + Mesh or something similar
given general_avoidance : set of (sequence (injective) of int, "composition of a mesh")

find perm : sequence (size length, injective) of int(1..length)

$ creating a padded version of perm, where position 0 contains the value 0 and position length+1 contains the value length+1
find permPadded : matrix indexed by [int(0..length+1)] of int(0..length+1)
such that permPadded[0] = 0, permPadded[length+1] = length+1
such that forAll i : int(1..length) . permPadded[i] = perm(i)

# Why do we need the padded version?

such that
    forAll (pattern, ind_bars, val_bars) in bivincular_avoidance .


        $ Look for all places where the pattern can occur
        forAll ix : matrix indexed by [int(0..|pattern|+1)] of int(0..length+1),
            and([ ix[0]=0
                , ix[|pattern|+1]=length+1
                , forAll i : int(0..|pattern|) . ix[i] < ix[i+1]
                , forAll n1, n2 : int(1..|pattern|) , n1 < n2 .
                    pattern(n1) < pattern(n2) <-> permPadded[ix[n1]] < permPadded[ix[n2]]
                ])
                
        # Is the matrix ix simply a subsequence of {0,1,2,3...|pattern|+1}

            .
            mesh_constraint /\ bivincular_constraint /\ consecutive_constraint + ...?
